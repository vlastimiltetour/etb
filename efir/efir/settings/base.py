"""
Django settings for efirthebrand project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path

from .base import *

DJANGO_SETTINGS_MODULE = "efir.settings.local"

import logging

# Set up the logging configuration
logging.basicConfig(level=logging.DEBUG)

try:
    logging.info("Loading local Env Module")
    import dotenv

    dotenv.read_dotenv()
    environment = "local"
except AttributeError:
    from dotenv import load_dotenv

    load_dotenv(".env")
    logging.info("Exception raised, means Production Env should be executed.")
    logging.info("Loading Production Env Module")
finally:
    logging.info("The whole dotenv cycle finished")


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG")


# ALLOWED_HOSTS = []


# Application definition
AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",  # this is default
    "guardian.backends.ObjectPermissionBackend",
)


INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",  # anonymous sessions https://docs.djangoproject.com/en/4.1/topics/http/sessions/#module-django.contrib.sessions
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "crispy_forms",
    "catalog.apps.CatalogConfig",
    "payments.apps.PaymentsConfig",
    "orders.apps.OrdersConfig",
    "cart.apps.CartConfig",
    "django.contrib.humanize",
    "coupons.apps.CouponsConfig",
    "stripepayment.apps.StripepaymentConfig",
    "newsletter.apps.NewsletterConfig",
    "inventory.apps.InventoryConfig",
    "django_recaptcha",
    "storages",
]


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "efir.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "cart.context_processors.cart",
                "catalog.context_processors.categories",
            ],
        },
    },
]

WSGI_APPLICATION = "efir.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/
# settings.py

LANGUAGE_CODE = "cs"  # Set language code for Czech

TIME_ZONE = "Europe/Prague"  # Set timezone for Czech Republic

USE_I18N = True  # Enable internationalization

USE_L10N = True  # Enable localization

USE_TZ = True  # Enable timezone support

CRISPY_TEMPLATE_PACK = "bootstrap4"

USE_THOUSAND_SEPARATOR = True
THOUSAND_SEPARATOR = " "


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

# Maximum size of a file that can be uploaded, added to django settings + settings updated in nginx
DATA_UPLOAD_MAX_MEMORY_SIZE = 20971520  # 20 MB

# Maximum size of a request that can be parsed by Django
# Set it to a value larger than DATA_UPLOAD_MAX_MEMORY_SIZE
# to allow handling larger files
FILE_UPLOAD_MAX_MEMORY_SIZE = 20971520  # 20 MB

AWS_S3_ENDPOINT_URL = (
    "https://etb.fra1.digitaloceanspaces.com"  # Change to your region's endpoint
)


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# This is the key that is going to be used to store the cart in the user session.
CART_SESSION_ID = "cart"
ORDER_SESSION_ID = "order"


# this is to make Django to write emails to the console
# EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# Setting up email server FORPSI
# https://support.forpsi.com/kb/a3147/konfigurace-smtp-serveru.aspx
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
EMAIL_PORT = os.getenv("EMAIL_PORT")
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS")
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL")
EMAIL_ENCRYPTION = os.getenv("EMAIL_ENCRYPTION")

ASGI_APPLICATION = "web.asgi.application"

# stripe credentials
STRIPE_PUBLISHABLE_KEY = os.getenv("STRIPE_PUBLISHABLE_KEY")
STRIPE_SECRET_KEY = os.getenv("STRIPE_SECRET_KEY")
STRIPE_API_VERSION = os.getenv("STRIPE_API_VERSION")
STRIPE_WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET")


# zasilkovna
ZASILKOVNA_API_KEY = os.getenv("ZASILKOVNA_API_KEY")
ZASILKOVNA_SECRET = os.getenv("ZASILKOVNA_SECRET")


RECAPTCHA_PUBLIC_KEY = os.getenv("RECAPTCHA_PUBLIC_KEY")
RECAPTCHA_PRIVATE_KEY = os.getenv("RECAPTCHA_PRIVATE_KEY")


STATICFILES_DIRS = (BASE_DIR / "static",)

# Local media files
MEDIA_ROOT = BASE_DIR / "mediafiles"


# oddeleny pro prod spaces

# Spaces settings
# https://stackoverflow.com/questions/76940089/signaturedoesnotmatch-digitalocean-spaces-boto3-django-storages-django
AWS_ACCESS_KEY_ID = str(os.getenv("AWS_ACCESS_KEY_ID"))
AWS_SECRET_ACCESS_KEY = str(os.getenv("AWS_SECRET_ACCESS_KEY"))
AWS_STORAGE_BUCKET_NAME = "etb"
AWS_DEFAULT_ACL = "public-read"
AWS_S3_ENDPOINT_URL = f"https://{AWS_STORAGE_BUCKET_NAME}.fra1.digitaloceanspaces.com"

AWS_S3_REGION_NAME = "fra1"

AWS_S3_OBJECT_PARAMETERS = {
    "CacheControl": "max-age=86400",
    "ACL": "public-read",  # THIS LINE IS OPTIONAL
}

# static settings
# AWS_LOCATION = 'static'


# Static files settings: this works
STATIC_URL = f"https://{AWS_S3_ENDPOINT_URL}/static/"
STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"


# Optional: Set S3 object parameters
AWS_S3_OBJECT_PARAMETERS = {
    "CacheControl": "max-age=86400",
    "ACL": "public-read",
}

# Public media files
AWS_PUBLIC_MEDIA_LOCATION = "media"
DEFAULT_FILE_STORAGE = "efir.settings.storage_backends.MediaStorage"
MEDIA_URL = f"{AWS_S3_ENDPOINT_URL}/{AWS_PUBLIC_MEDIA_LOCATION}/"

# Optional: Set S3 object parameters (again, if needed)
AWS_S3_OBJECT_PARAMETERS = {
    "CacheControl": "max-age=86400",
    "ACL": "public-read",
}
